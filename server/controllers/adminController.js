const Validation = require("../validation/functions");
const ErrorHandler = require("../errors/errorHandler")
const {
    User,
    Cart,
    Supplier, SupplierGood, CompanyCart
} = require("../database/model");
const bcrypt = require("bcrypt");
const generator = require('generate-password');
const uuid = require("uuid");
const {resolve, extname} = require("path");
const nodemailer = require('nodemailer')

class AdminController {
    async getAllSuppliers(req, res, next) {
        try {
            const suppliers = await Supplier.findAll({
                include: [
                    {model: SupplierGood},
                    {model: User}
                ]
            })

            return res.json({suppliers})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async createSupplier(req, res, next) {
        const {
            userEmail,
            userRole = "SUPPLIER",
            supplierSurname,
            supplierName,
            supplierPatronymic = null
        } = req.body
        const {supplierImage} = req.files || {}

        const allowedImageExtensions = ['.jpg', '.jpeg', '.png', '.gif'];

        try {
            if (!(Validation.isString(userEmail)) || !(Validation.isEmail(userEmail)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierSurname) || Validation.isEmpty(supplierSurname)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierName) || Validation.isEmpty(supplierName)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))

            if (supplierImage === undefined)
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'))

            const fileExtension = extname(supplierImage.name).toLowerCase();
            if (!allowedImageExtensions.includes(fileExtension))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: jpg, jpeg, png –∏–ª–∏ gif!'));

            const candidate = await User.findOne({where: {userEmail}})
            if (candidate) {
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—á—Ç–æ–π ${userEmail} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`))
            }

            let password = generator.generate({
                length: 8,
                numbers: true,
                uppercase: true,
                lowercase: true
            })
            const user = await User.create({
                userEmail,
                userPassword: await bcrypt.hash(password, 5),
                userRole
            })

            await Cart.create({
                userId: user.id
            })

            let fileName = uuid.v4() + ".jpg"
            await supplierImage.mv(resolve(__dirname, '..', 'static', fileName))

            const transporter = nodemailer.createTransport({
                host: 'smtp.mail.ru',
                port: 465,
                secure: true,
                auth: {
                    user: 'sasha.shumilkin010101@mail.ru',
                    pass: 'h8qfHhN1LLAmnYbcCsmi'
                },
                from: "sasha.shumilkin010101@mail.ru"
            });
            const mailOptions = {
                from: 'sasha.shumilkin010101@mail.ru',
                to: `${userEmail}`,
                subject: '–û—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–ò–ü –ì–∞–±–¥—Ä–∞—Ö–º–∞–Ω–æ–≤ –ò.–ò."',
                text: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, " + supplierName + " " + supplierPatronymic + ". –ú—ã —Ä–∞–¥—ã –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–µ —Å –í–∞–º–∏ üß° –í—ã—Å—ã–ª–∞–µ–º –í–∞–º –í–∞—à –ø–∞—Ä–æ–ª—å: " + password + "."
            };

            try {
                await transporter.sendMail(mailOptions)
            } catch (error) {
                return next(ErrorHandler.badRequest('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –ø–æ—á—Ç—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é!'))
            }

            const supplier = await Supplier.create({
                id: user.id,
                supplierImage: fileName,
                supplierSurname,
                supplierName,
                supplierPatronymic,
                userId: user.id
            })

            return res.json({supplier})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteOneSupplier(req, res, next) {
        const {id} = req.query
        try {
            const supplier = await Supplier.findOne({where: {id: id}})
            if (!supplier)
                return next(ErrorHandler.conflict(`–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            const good  = await SupplierGood.findAll({where: {supplierId: supplier.id}})

            const user = await User.findOne({where: {id: supplier.id}})
            if (!user)
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            await Promise.all(good.map((item) => item.destroy()))
            await supplier.destroy()
            await user.destroy()

            return res.status(200).json({message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteAllSuppliers(req, res, next) {
        try {
            const supplier = await Supplier.findAll()
            if (!supplier)
                return next(ErrorHandler.conflict(`–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            const good  = await SupplierGood.findAll()

            const user = await User.findAll({where: {userRole: 'SUPPLIER'}})
            if (!user)
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '–ü–û–°–¢–ê–í–©–ò–ö' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            await Promise.all(good.map((item) => item.destroy()))
            await Promise.all(supplier.map((item) => item.destroy()))
            await Promise.all(user.map((item) => item.destroy()))

            return res.status(200).json({message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async createOrder(req, res, next) {
        const {id} = req.query
        try {
            const good = await SupplierGood.findOne({where: {id: id}})
            const cart = await CompanyCart.findOne({where: {supplierGoodId: good.id}})
            if (cart) {

            }
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }
}

module.exports = new AdminController()