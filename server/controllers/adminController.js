const Validation = require("../validation/functions");
const ErrorHandler = require("../errors/errorHandler")
const {
    User,
    Cart, Supplier
} = require("../database/model");
const bcrypt = require("bcrypt");
const generator = require('generate-password');
const uuid = require("uuid");
const {resolve} = require("path");
const nodemailer = require('nodemailer')

class AdminController {
    async createSupplier(req, res, next) {
        const {
            userEmail,
            userRole = "SUPPLIER",
            supplierSurname,
            supplierName,
            supplierPatronymic = null
        } = req.body
        const {supplierImage} = req.files || {}
        try {
            if (!(Validation.isString(userEmail)) || !(Validation.isEmail(userEmail)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierSurname) || Validation.isEmpty(supplierSurname)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierName) || Validation.isEmpty(supplierName)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))

            if (supplierImage === undefined)
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'))

            const candidate = await User.findOne({where: {userEmail}})
            if (candidate) {
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—á—Ç–æ–π ${userEmail} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`))
            }

            let password = generator.generate({
                length: 8,
                numbers: true,
                uppercase: true,
                lowercase: true
            })
            const user = await User.create({
                userEmail,
                userPassword: await bcrypt.hash(password, 5),
                userRole
            })

            await Cart.create({
                userId: user.id
            })

            let fileName = uuid.v4() + ".jpg"
            await supplierImage.mv(resolve(__dirname, '..', 'static', fileName))

            const transporter = nodemailer.createTransport({
                host: 'smtp.mail.ru',
                port: 465,
                secure: true,
                auth: {
                    user: 'sasha.shumilkin010101@mail.ru',
                    pass: 'h8qfHhN1LLAmnYbcCsmi'
                },
                from: "sasha.shumilkin010101@mail.ru"
            });
            const mailOptions = {
                from: 'sasha.shumilkin010101@mail.ru',
                to: `${userEmail}`,
                subject: '–û—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–ò–ü –ì–∞–±–¥—Ä–∞—Ö–º–∞–Ω–æ–≤ –ò.–ò."',
                text: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, " + supplierName + " " + supplierPatronymic + ". –ú—ã —Ä–∞–¥—ã –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–µ —Å –í–∞–º–∏ üß° –í—ã—Å—ã–ª–∞–µ–º –í–∞–º –í–∞—à –ø–∞—Ä–æ–ª—å: " + password + "."
            };
            await transporter.sendMail(mailOptions)

            const supplier = await Supplier.create({
                supplierImage: fileName,
                supplierSurname,
                supplierName,
                supplierPatronymic,
                userId: user.id
            })

            return res.json({supplier})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }
}

module.exports = new AdminController()