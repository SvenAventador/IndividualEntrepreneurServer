const Validation = require("../validation/functions");
const ErrorHandler = require("../errors/errorHandler")
const {
    User,
    Cart,
    Supplier,
    SupplierGood,
    CompanyCart,
    Invoice,
    CompanyGood
} = require("../database/model");
const bcrypt = require("bcrypt");
const generator = require('generate-password');
const uuid = require("uuid");
const {
    resolve,
    extname
} = require("path");
const nodemailer = require('nodemailer')
const ExcelJS = require('exceljs')
const {Sequelize} = require("sequelize");

class AdminController {
    async getAllSuppliers(req, res, next) {
        try {
            const suppliers = await Supplier.findAll({
                include: [
                    {model: SupplierGood},
                    {model: User}
                ]
            })

            return res.json({suppliers})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async createSupplier(req, res, next) {
        const {
            userEmail,
            userRole = "SUPPLIER",
            supplierSurname,
            supplierName,
            supplierPatronymic = null
        } = req.body
        const {supplierImage} = req.files || {}

        const allowedImageExtensions = ['.jpg', '.jpeg', '.png', '.gif'];

        try {
            if (!(Validation.isString(userEmail)) || !(Validation.isEmail(userEmail)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierSurname) || Validation.isEmpty(supplierSurname)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))
            if (!(Validation.isString(supplierName) || Validation.isEmpty(supplierName)))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞!'))

            if (supplierImage === undefined)
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'))

            const fileExtension = extname(supplierImage.name).toLowerCase();
            if (!allowedImageExtensions.includes(fileExtension))
                return next(ErrorHandler.badRequest('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: jpg, jpeg, png –∏–ª–∏ gif!'));

            const candidate = await User.findOne({where: {userEmail}})
            if (candidate) {
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—á—Ç–æ–π ${userEmail} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`))
            }

            let password = generator.generate({
                length: 8,
                numbers: true,
                uppercase: true,
                lowercase: true
            })
            const user = await User.create({
                userEmail,
                userPassword: await bcrypt.hash(password, 5),
                userRole
            })

            let fileName = uuid.v4() + ".jpg"
            await supplierImage.mv(resolve(__dirname, '..', 'static', fileName))

            const transporter = nodemailer.createTransport({
                host: 'smtp.mail.ru',
                port: 465,
                secure: true,
                auth: {
                    user: 'sasha.shumilkin010101@mail.ru',
                    pass: 'h8qfHhN1LLAmnYbcCsmi'
                },
                from: "sasha.shumilkin010101@mail.ru"
            });
            const mailOptions = {
                from: 'sasha.shumilkin010101@mail.ru',
                to: `${userEmail}`,
                subject: '–û—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–ò–ü –ì–∞–±–¥—Ä–∞—Ö–º–∞–Ω–æ–≤ –ò.–ò."',
                text: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, " + supplierName + " " + supplierPatronymic + ". –ú—ã —Ä–∞–¥—ã –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –≤–º–µ—Å—Ç–µ —Å –í–∞–º–∏ üß° –í—ã—Å—ã–ª–∞–µ–º –í–∞–º –í–∞—à –ø–∞—Ä–æ–ª—å: " + password + "."
            };

            try {
                await transporter.sendMail(mailOptions)
            } catch (error) {
                return next(ErrorHandler.badRequest('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç—É –ø–æ—á—Ç—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é!'))
            }

            const supplier = await Supplier.create({
                id: user.id,
                supplierImage: fileName,
                supplierSurname,
                supplierName,
                supplierPatronymic,
                userId: user.id
            })

            return res.json({supplier})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteOneSupplier(req, res, next) {
        const {id} = req.query
        try {
            const supplier = await Supplier.findOne({where: {id: id}})
            if (!supplier)
                return next(ErrorHandler.conflict(`–ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            const good = await SupplierGood.findAll({where: {supplierId: supplier.id}})

            const user = await User.findOne({where: {id: supplier.id}})
            if (!user)
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            await Promise.all(good.map((item) => item.destroy()))
            await supplier.destroy()
            await user.destroy()

            return res.status(200).json({message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async deleteAllSuppliers(req, res, next) {
        try {
            const supplier = await Supplier.findAll()
            if (!supplier)
                return next(ErrorHandler.conflict(`–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            const good = await SupplierGood.findAll()

            const user = await User.findAll({where: {userRole: 'SUPPLIER'}})
            if (!user)
                return next(ErrorHandler.conflict(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '–ü–û–°–¢–ê–í–©–ò–ö' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            await Promise.all(good.map((item) => item.destroy()))
            await Promise.all(supplier.map((item) => item.destroy()))
            await Promise.all(user.map((item) => item.destroy()))

            return res.status(200).json({message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async addToCart(req, res, next) {
        const {
            supplierId,
            adminId,
            supplierGoodId
        } = req.query

        try {
            await User.findOne({where: {id: supplierId}}).then((supplier) => {
                if (!supplier.userRole || supplier.userRole !== 'SUPPLIER')
                    return next(ErrorHandler.conflict('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'))
            })
            await User.findOne({where: {id: adminId}}).then((admin) => {
                if (!admin || admin.userRole !== 'ADMIN')
                    return next(ErrorHandler.conflict('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
            })

            const good = await SupplierGood.findOne({where: {id: supplierGoodId}})
            if (!good)
                return next(ErrorHandler.badRequest(`–ü–æ–¥–æ–±–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º ${supplierId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`))

            const candidate = await CompanyCart.findOne({where: {supplierGoodId: supplierGoodId}})
            if (candidate) {
                if (good.goodAmount < candidate.countGood + 1)
                    return next(ErrorHandler.conflict('–î–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ!'))

                await candidate.update({
                    countGood: candidate.countGood + 1
                })
                return res.status(200).json({message: `–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`})
            }

            await CompanyCart.create({
                supplierId,
                userId: adminId,
                supplierGoodId
            })

            return res.status(200).json({message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async getGoodsInCart(req, res, next) {
        try {
            let goods_array = []
            const allSupplierIds = await CompanyCart.findAll({
                attributes: [[
                    Sequelize.fn('DISTINCT', Sequelize.col('supplierId')), 'supplierId']],
                raw: true
            });

            for (const {supplierId} of allSupplierIds) {
                const supplierData = await CompanyCart.findAll({
                    where: {supplierId},
                    include: [{
                        model: SupplierGood,
                        attributes: [
                            'goodName',
                            'goodDescription',
                            'goodType',
                            'goodBrand',
                            'goodPrice'
                        ]
                    }
                    ],
                    raw: true
                });

                goods_array = goods_array.concat(supplierData)
            }

            return res.json({goods_array})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async createOrder(req, res, next) {
        const {adminId} = req.query
        try {
            const allSupplierIds = await CompanyCart.findAll({
                attributes: [[
                    Sequelize.fn('DISTINCT', Sequelize.col('supplierId')), 'supplierId']],
                raw: true
            });

            for (const {supplierId} of allSupplierIds) {
                const supplierData = await CompanyCart.findAll({
                    where: {supplierId},
                    include: [{
                        model: SupplierGood,
                        attributes: [
                            'id',
                            'goodName',
                            'goodDescription',
                            'goodType',
                            'goodBrand',
                            'goodAmount',
                            'goodPrice',
                            'goodImage'
                        ]
                    }
                    ],
                    raw: true
                });

                let totalPrice = 0
                for (const data of supplierData) {
                    totalPrice += parseFloat(data['supplier_good.goodPrice']) * data.countGood;
                    const updatedQuantity = data['supplier_good.goodAmount'] - data.countGood;
                    await SupplierGood.update(
                        {
                            goodAmount: updatedQuantity
                        },
                        {
                            where: {
                                id: data['supplier_good.id']
                            }
                        });
                }

                const workbook = new ExcelJS.Workbook();
                const worksheet = workbook.addWorksheet('SupplierData');

                const headerStyle = {
                    font: {
                        name: 'Times New Roman',
                        size: 16,
                        bold: true
                    },
                    alignment: {
                        vertical: 'middle',
                        horizontal: 'center'
                    },
                    border: {
                        top: {style: 'medium'},
                        bottom: {style: 'medium'},
                        left: {style: 'medium'},
                        right: {style: 'medium'}
                    }
                }

                const dataStyle = {
                    font: {name: 'Arial', size: 14},
                    alignment: {vertical: 'middle', horizontal: 'center'},
                    border: {
                        top: {style: 'medium'},
                        bottom: {style: 'medium'},
                        left: {style: 'medium'},
                        right: {style: 'medium'}
                    }
                }

                worksheet.addRow([
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                    '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                    '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞',
                    '–ë—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞',
                    '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞',
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞'
                ]).eachCell((cell) => {
                    cell.style = headerStyle
                })

                const columnWidths = [
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–ë—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞'.length * 2,
                    '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'.length * 2
                ];

                worksheet.columns.forEach((column, index) => {
                    column.width = columnWidths[index];
                });

                supplierData.forEach((data, index) => {
                    worksheet.addRow([
                        data['supplier_good.goodName'],
                        data['supplier_good.goodDescription'],
                        data['supplier_good.goodType'],
                        data['supplier_good.goodBrand'],
                        data['supplier_good.goodPrice'],
                        data.countGood,
                        data['supplier_good.goodImage']
                    ]).eachCell((cell) => {
                        cell.style = dataStyle;
                    });
                })

                worksheet.addRow([
                    '–û–±—â–∞—è —Ü–µ–Ω–∞:', `${totalPrice}`
                ]).eachCell((cell) => {
                    cell.style = dataStyle
                })

                let fileName = uuid.v4() + ".xlsx"
                let filePath = resolve(__dirname, '..', 'static', 'xlsx', fileName);
                await workbook.xlsx.writeFile(filePath);

                await Invoice.create({
                    invoiceFile: fileName,
                    supplierId,
                    deliveryOrderStatusId: 1
                })
            }

            await CompanyCart.findAll().then((data) => {
                data.map(async (item) => {
                    await item.destroy()
                })
            })

            return res.status(200).json({message: '–ù–∞–∫–ª–∞–¥–Ω–∞—è(-—ã–µ) —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!'})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }

    async getAllGoods(req, res, next) {
        try {
            const allGoods = await CompanyGood.findAll()
            return res.json({allGoods})
        } catch (error) {
            return next(ErrorHandler.internal(`–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`))
        }
    }
}

module.exports = new AdminController()